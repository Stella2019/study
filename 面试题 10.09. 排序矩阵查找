给定M×N矩阵，每一行、每一列都按升序排列，请编写代码找出某元素。

示例:

现有矩阵 matrix 如下：

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。

给定 target = 20，返回 false。
 
解题思路
从右上角的元素出发：
（1）如果当前元素>目标值，说明这一列都大于目标值，向左移动一列
（2）如果当前元素<目标值，说明这一列其他的元素有可能是目标值，向下移动一行

终止条件: 找到了目标元素 或者 行或列越界

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not len(matrix) or not len(matrix[0]): #特判一下矩阵为空的情况
            return False
        row = 0
        col = len(matrix[0]) - 1
        while row != len(matrix) and col != -1:
            if matrix[row][col] > target:
                col -= 1
            elif matrix[row][col] < target:
                row += 1   
            else:
                return True
        return False
 
解题思路
对矩阵逐行进行二分查找。
优化：
由于矩阵是排好序的，所以一个元素小于右下方向的所有元素。
当某一行的第一个元素大于目标值，说明下面元素都不符合要求，直接break
第一个元素小于目标值，最后一个元素大于目标值时，对这一行进行二分查找

没找到则返回False
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix:
            return False
        if not matrix[0]:
            return False
        n = len(matrix)
        m = len(matrix[0])
        for i in range(n):
            if matrix[i][0]>target:
                break
            if matrix[i][-1]>=target:
                left = 0
                right = m-1
                while left<=right:
                    mid = (left+right)//2
                    if matrix[i][mid] == target:
                        return True
                    elif matrix[i][mid] > target:
                        right = mid-1
                    else:
                        left = mid+1
        
        return False
 
 
