### 树的最长路径和124

给定一个非空二叉树，返回其最大路径和。

方法一：递归
首先，考虑实现一个简化的函数 maxGain(node)，该函数计算二叉树中的一个节点的最大贡献值，具体而言，就是在以该节点为根节点的子树中寻找以该节点为起点的一条路径，使得该路径上的节点值之和最大。

具体而言，该函数的计算如下。

空节点的最大贡献值等于 00。

非空节点的最大贡献值等于节点值与其子节点中的最大贡献值之和（对于叶节点而言，最大贡献值等于节点值）。
 
例如，考虑如下二叉树。


   -10
   / \
  9  20
    /  \
   15   7

叶节点 99、1515、77 的最大贡献值分别为 99、1515、77。

得到叶节点的最大贡献值之后，再计算非叶节点的最大贡献值。节点 2020 的最大贡献值等于 20+\max(15,7)=3520+max(15,7)=35，节点 -10−10 的最大贡献值等于 -10+\max(9,35)=25−10+max(9,35)=25。

上述计算过程是递归的过程，因此，对根节点调用函数 maxGain，即可得到每个节点的最大贡献值。

根据函数 maxGain 得到每个节点的最大贡献值之后，如何得到二叉树的最大路径和？对于二叉树中的一个节点，该节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值，如果子节点的最大贡献值为正，则计入该节点的最大路径和，否则不计入该节点的最大路径和。维护一个全局变量 maxSum 存储最大路径和，在递归过程中更新 maxSum 的值，最后得到的 maxSum 的值即为二叉树中的最大路径和。
class Solution:
    def __init__(self):
        self.maxSum = float("-inf")

    def maxPathSum(self, root: TreeNode) -> int:
        def maxGain(node):
            if not node:
                return 0

            # 递归计算左右子节点的最大贡献值
            # 只有在最大贡献值大于 0 时，才会选取对应子节点
            leftGain = max(maxGain(node.left), 0)
            rightGain = max(maxGain(node.right), 0)
            
            # 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值
            priceNewpath = node.val + leftGain + rightGain
            
            # 更新答案
            self.maxSum = max(self.maxSum, priceNewpath)
        
            # 返回节点的最大贡献值
            return node.val + max(leftGain, rightGain)
   
        maxGain(root)
        return self.maxSum

复杂度分析

时间复杂度：O(N)O(N)，其中 NN 是二叉树中的节点个数。对每个节点访问不超过 22 次。

空间复杂度：O(N)O(N)，其中 NN 是二叉树中的节点个数。空间复杂度主要取决于递归调用层数，最大层数等于二叉树的高度，最坏情况下，二叉树的高度等于二叉树中的节点个数。
 


解题思路
记录一下本题的感受以及思考过程，理解递归更深刻一点：

首先想到的是，我可以很容易的用递归计算二叉树所有节点的和，而在本题中，就需要比较路径的大小来设计递归。
其实二叉树的递归遍历，只要包含如下代码，就可以了，而针对不同的题目，
我们会设置一些递归的返回值（包括终止条件），设计递归函数的参数，或者用外部变量记录的方式，来达到题目的要求。


def dfs(root):
    if not root: return
    dfs(root.left)
    dfs(root.right)
而返回值、参数、外部变量是不影响递归的进行的（只要有以上代码），这时候就是发挥人类智慧，开始设计递归的时候。
至少对于二叉树的递归，每个题目都可以这么想。

再回归到本题，本题的递归设计
首先，本来我想用原本的函数maxPathSum()直接递归（能简则简），但是发现行不通，因为始终需要一个外部变量参与比较，更新最大值，然后就另外写了dfs()的函数用来递归。

其次，递归函数的参数，本题不用改，因为只需要一个根节点遍历完二叉树就行，且最大值必须要遍历完才知道是不是最大值。所以是dfs(root)就行。

然后，鉴于第一点的分析，这题我需要一个外部（全局）变量self.maxsum来记录当前的最大路径值，并在递归的过程中不断更新最大值。

最后，本题最重要的就是返回值的设计，鉴于最开始的分析，其实返回值有和没有并不影响递归遍历节点，但是本题必须要借用返回值来在每一层递归中比较路径的大小，因为如果不将这个路径的大小随着函数返回的话，外部变量self.maxsum将会无法每一轮比较和更新。
所以本题的返回值，返回路径的大小应该怎么设计？
在本题中，这个路径可以是任意一个路径，甚至可以只是一个节点，所以我每次比较的都是当前节点的左子树和右子树的大小，那个大选哪个，然后还要加上这个根节点的值val，最后与0相比较，因为如果这个树枝比0还小，那不要也罢，直接返回0，要不然最大值还减小了。

递归的函数设计好了，那本题的答案还没有得到啊，之前的self.maxsum还没有用，现在我们知道dfs(root)一定返回的是当前节点以下，所包含路径的最大值(有可能为0)，所以我们就每轮都比较并记录，self.maxsum与左子树与右子树的最大值加上当前节点的值val(说的有点乱)，即self.maxsum = max(self.maxsum, left + right + root.val)。

最后回到主函数，返回self.maxsum即可，而此时dfs()函数返回的是根节点以下所包含路径的最大值。

代码

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.maxsum = float('-inf')
        def dfs(root):
            if not root: return 0
            left = dfs(root.left)
            right = dfs(root.right)
            self.maxsum = max(self.maxsum, left + right + root.val)
            return max(0, max(left, right) + root.val)
        print(dfs(root))
        return self.maxsum
 




本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。
是路径的root，此时的最大值来自于node.left+node.right;
不是路径的root，此时的最大值来自于node.left或node.right

 

class Solution:
    def maxPathSum(self, root):
         
        :type root: TreeNode
        :rtype: int
         
        res = float('-inf')
        def maxPath(node):
            nonlocal res 
            if not node:
                return 0
            
            left = max(0, maxPath(node.left))
            right = max(0, maxPath(node.right))
            res = max(res, left + right + node.val)
            return max(left, right) + node.val
        
        maxPath(root)
        return res



Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def maxPathSum(self, root):
         
        :type root: TreeNode
        :rtype: int
        
        def dfs(root):
            if not root: return (0, float("-inf"))
            (l, lm), (r, rm) = map(dfs, [root.left, root.right])
            return (max(root.val, root.val + max(l, r)), max(lm, rm, root.val + max(l, r), root.val, root.val + l + r))
        return dfs(root)[1]

 
if __name__ == '__main__': 
    arr = [12, 11, 13, 5, 6, 7]  
    print ("Given array is", end ="\n")  
    printList(arr) 
    mergeSort(arr) 
    print("Sorted array is: ", end ="\n") 
    printList(arr) 

 
