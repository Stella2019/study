给定一个正整数数组 w ，其中 w[i] 代表下标 i 的权重（下标从 0 开始），请写一个函数 pickIndex ，它可以随机地获取下标 i，选取下标 i 的概率与 w[i] 成正比。

例如，对于 w = [1, 3]，挑选下标 0 的概率为 1 / (1 + 3) = 0.25 （即，25%），而选取下标 1 的概率为 3 / (1 + 3) = 0.75（即，75%）。

也就是说，选取下标 i 的概率为 w[i] / sum(w) 。

 

示例 1：

输入：
["Solution","pickIndex"]
[[[1]],[]]
输出：
[null,0]
解释：
Solution solution = new Solution([1]);
solution.pickIndex(); // 返回 0，因为数组中只有一个元素，所以唯一的选择是返回下标 0。
示例 2：

输入：
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
输出：
[null,1,1,1,1,0]
解释：
Solution solution = new Solution([1, 3]);
solution.pickIndex(); // 返回 1，返回下标 1，返回该下标概率为 3/4 。
solution.pickIndex(); // 返回 1
solution.pickIndex(); // 返回 1
solution.pickIndex(); // 返回 1
solution.pickIndex(); // 返回 0，返回下标 0，返回该下标概率为 1/4 。

由于这是一个随机问题，允许多个答案，因此下列输出都可以被认为是正确的:
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
......
诸若此类。

 
 
 解题思路
按概率w[i] / sum(w)分配。

朴素解法：遍历w数组，pickIndex是O(n)。
优化解法：预处理w数组预先得到分位点数组ws，因为ws是单调递增的，所以可以用二分查找bisect_right，时间复杂度O(log(n))。
 class Solution:

    def __init__(self, w: List[int]):
        self.total = sum(w)
        self.ws = []
        for i in w:
            prev = 0 if len(self.ws) == 0 else self.ws[-1]
            self.ws.append(prev + i)


    def pickIndex(self) -> int:
        if self.total == 0:
            return -1
        val = random.randrange(0, self.total)
        return bisect.bisect_right(self.ws, val)



# Your Solution object will be instantiated and called as such:
# obj = Solution(w)
# param_1 = obj.pickIndex()

 
 解题思路
缓存一个计数池，每次操作从计数池中随机抽取元素，当计数池中某元素少于等于0时，剔除该元素，当所有元素都少于等于0则重置该计数池。
class Solution:

    def __init__(self, w: List[int]):
        total_val = sum(w)
        self.w = list(map(lambda x: int(math.ceil(x/total_val*100)), w))
        self.pool = None
        self.keys = None
        self._init_keys()
    
    def _init_keys(self):
        self.keys = []
        self.pool = self.w[:]
        for index in range(len(self.w)):
            if self.w[index] > 0:
                self.keys.append(index)

    def pickIndex(self) -> int:
        if len(self.keys) == 0:
            self._init_keys()
        selected = random.randint(0, len(self.keys)-1)
        res = self.keys[selected]
        self.pool[res] -= 1
        if self.pool[res] <= 0:
            self.keys.pop(selected)
        return res




# Your Solution object will be instantiated and called as such:
# obj = Solution(w)
# param_1 = obj.pickIndex()

 
